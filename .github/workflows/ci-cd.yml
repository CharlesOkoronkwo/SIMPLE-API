name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List Files
        run: ls -la terraform

      - name: Terraform Init
        run: terraform init -chdir=terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve -chdir=terraform

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/simple-api .
          docker push ${{ secrets.DOCKER_USERNAME }}/simple-api

  deploy:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy with Terraform
        run: terraform apply -auto-approve -chdir=terraform

  verify:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Test API Endpoint
        run: |
          sleep 60 # Give some time for the deployment to stabilize
          RESPONSE=$(curl --fail -s http://<API_ENDPOINT>/api)
          echo "Response: $RESPONSE"
          if [[ $RESPONSE != *"expected-output"* ]]; then
            echo "API test failed"
            exit 1
          fi
          echo "API test passed"
