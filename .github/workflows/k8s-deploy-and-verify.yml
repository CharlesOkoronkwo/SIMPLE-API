name: Kubernetes Deployment and Verification

on:
  workflow_dispatch:

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    permissions:
      id-token: 'write'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          service_account: ${{ secrets.SA_EMAIL }}
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: setup
    permissions:
      id-token: 'write'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Get GKE Credentials
        run: |
          gcloud container clusters get-credentials simple-api --zone us-central1 --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy with Terraform to Kubernetes
        working-directory: kubernetes_resource
        run: terraform init && terraform apply -auto-approve
        env:
          GOOGLE_OAUTH_ACCESS_TOKEN: ${{ secrets.GOOGLE_OAUTH_ACCESS_TOKEN }}

      - name: Get Kubernetes Service External IP
        id: get-service-ip
        run: |
          # Wait until the service has an external IP
          external_ip=""
          while [ -z "$external_ip" ]; do
            echo "Waiting for external IP..."
            external_ip=$(kubectl get svc simple-api-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            [ -z "$external_ip" ] && sleep 10
          done
          echo "External IP found: $external_ip"
          echo "::set-output name=external_ip::$external_ip"

  verify:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Test API Endpoint
        run: |
          sleep 60 # Give some time for the deployment to stabilize
          RESPONSE=$(curl --fail -s http://${{ needs.deploy.outputs.external_ip }}/api)
          echo "Response: $RESPONSE"
