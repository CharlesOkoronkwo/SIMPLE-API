name: Kubernetes Deployment and Verification

on:
  workflow_dispatch:

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          service_account: ${{ secrets.SA_EMAIL }}
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

  Kubernetes-Workflow:
    name: Deploy the k8s workflow 
    runs-on: ubuntu-latest
    needs: setup
    permissions:
      id-token: 'write'
    steps: 
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Terraform Init
        working-directory: kubernetes_resource
        run: terraform init
        
      - name: Get Access Token for Terraform
        id: 'auth'
        uses: google-github-actions/auth@v1
        with:
          service_account: ${{ secrets.SA_EMAIL }}
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}

      - name: Terraform Apply
        working-directory: kubernetes_resource
        run: terraform apply -auto-approve
        env: 
          GOOGLE_OAUTH_ACCESS_TOKEN: ${{ steps.auth.outputs.access_token }}

      - name: Apply Only If Changes Exist
        working-directory: kubernetes_resource
        run: terraform apply -auto-approve
        if: ${{ steps.plan.outputs.changes }} == 'true'
        env: 
          GOOGLE_OAUTH_ACCESS_TOKEN: ${{ steps.auth.outputs.access_token }}

  verify:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: Kubernetes-Workflow
    steps:
    - name: Wait for deployment to stabilize
      run: sleep 60

    - name: Set up kubectl (Authenticate with GKE)
      run: |
        gcloud container clusters get-credentials simple-api --region us-central1 --project ${{ secrets.GCP_PROJECT_ID }}

    - name: Retrieve Kubernetes service external IP
      id: get-ip
      run: |
        API_IP=$(kubectl get svc simple-api-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        if [ -z "$API_IP" ]; then
          echo "Service IP not available yet"
          exit 1
        fi
        echo "API_IP=$API_IP" >> $GITHUB_ENV

    - name: Test API Endpoint
      run: |
        RESPONSE=$(curl --fail -s http://$API_IP/api || echo "Failed")
        if [ "$RESPONSE" != "Failed" ]; then
          echo "API is reachable. Response: $RESPONSE"
        else
          echo "API verification failed."
          exit 1
